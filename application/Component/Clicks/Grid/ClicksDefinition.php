<?php
/*
 * @ https://EasyToYou.eu - IonCube v11 Decoder Online
 * @ PHP 7.2
 * @ Decoder version: 1.0.4
 * @ Release: 01/09/2021
 */

namespace Component\Clicks\Grid;

class ClicksDefinition extends \Component\Grid\Definition\GridDefinition
{
    protected $_table = "clicks";
    protected $_rangeTimeField = "datetime";
    public function getTitle()
    {
        return \Core\Locale\LocaleService::t("clicks.log");
    }
    protected function _getAffiliateNetworkColumn()
    {
        $result = ["type" => \Component\Grid\Definition\Column::INTEGER, "groupable" => true, "filter" => ["type" => \Component\Grid\Definition\Column::ENUM, "title" => "grid.affiliate_network", "category" => "data", "dictionary" => ["valueProp" => "id", "url" => "?object=affiliateNetworks.index", "group" => true]], "sortable" => true, "category" => "ids", "width" => 80];
        if (\Traffic\Repository\ParameterRepository::instance()->hasAffiliateNetworkId()) {
            $result["groupable"] = true;
            $result["filter"]["dictionary"]["group"] = true;
        } else {
            $result["relation"] = "affiliate_networks";
            $result["inner_select"] = ["t_affiliate_networks.id" => "affiliate_network_id"];
        }
        return $result;
    }
    public function initColumns()
    {
        $this->addColumn(new \Component\Grid\Definition\Column("profitability", ["type" => \Component\Grid\Definition\Column::DECIMAL, "th_title" => "#", "sortable" => true, "groupable" => false, "category" => "money", "sort_by" => "profitability", "metric" => true, "inner_select" => ["sale_revenue + lead_revenue - cost" => "profitability"], "formatter" => \Component\Grid\Definition\Column::FORMATTER_PROFITABILITY, "filter" => ["type" => \Component\Grid\Definition\Column::BOOLEAN], "exclude_from_details" => true, "resizable" => false, "width" => 3, "fraction_size" => 4, "axis" => "volume"]));
        $this->addColumn(new \Component\Grid\Definition\Column("click_id", ["type" => \Component\Grid\Definition\Column::INTEGER, "sortable" => true, "primary" => true, "category" => "ids", "groupable" => true, "hidden" => true, "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("datetime", ["type" => \Component\Grid\Definition\Column::DATETIME, "sortable" => true, "formatter" => \Component\Grid\Definition\Column::FORMATTER_DATETIME, "category" => "data", "required_columns" => ["click_id"], "clickable" => true, "width" => 160]));
        $this->addColumn(new \Component\Grid\Definition\Column("sub_id", ["type" => \Component\Grid\Definition\Column::STRING, "sortable" => true, "filter" => ["type" => \Component\Grid\Definition\Column::STRING], "category" => "ids", "width" => 145]));
        $this->addColumn(new \Component\Grid\Definition\Column("visitor_code", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "visitors", "inner_select" => ["t_visitors.visitor_code" => "visitor_code"], "sortable" => true, "filter" => ["type" => \Component\Grid\Definition\Column::STRING], "groupable" => true, "category" => "ids"]));
        $this->addColumn(new \Component\Grid\Definition\Column("visitor_id", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "visitors", "inner_select" => ["t_visitors.id" => "visitor_id"], "sortable" => true, "filter" => ["type" => \Component\Grid\Definition\Column::STRING], "groupable" => true, "category" => "ids"]));
        $this->addColumn(new \Component\Grid\Definition\Column("campaign_id", ["type" => \Component\Grid\Definition\Column::INTEGER, "sortable" => true, "groupable" => true, "filter" => ["type" => \Component\Grid\Definition\Column::ENUM, "title" => "grid.campaign", "category" => "data", "dictionary" => ["valueProp" => "id", "url" => "?object=campaigns.listAsOptions", "group" => true]], "category" => "ids", "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("campaign", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "campaigns", "inner_select" => ["t_campaigns.name" => "campaign"], "sortable" => true, "groupable" => true, "category" => "data", "width" => 200]));
        $this->addColumn(new \Component\Grid\Definition\Column("campaign_group_id", ["type" => \Component\Grid\Definition\Column::INTEGER, "th_title" => "grid.campaign_group_id_th", "relation" => "campaigns", "sortable" => true, "inner_select" => ["t_campaigns.group_id" => "campaign_group_id"], "groupable" => true, "filter" => ["type" => \Component\Grid\Definition\Column::ENUM, "title" => "grid.campaign_group", "category" => "data", "dictionary" => ["url" => "?object=groups.listAsOptions&type=campaigns"]], "category" => "ids", "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("campaign_group", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "campaign_groups", "inner_select" => ["t_campaign_groups.name" => "campaign_group"], "sortable" => true, "groupable" => true, "category" => "data", "width" => 100]));
        $this->addColumn(new \Component\Grid\Definition\Column("parent_campaign_id", ["type" => \Component\Grid\Definition\Column::INTEGER, "th_title" => "grid.parent_campaign_id_th", "sortable" => true, "groupable" => true, "filter" => ["type" => \Component\Grid\Definition\Column::ENUM, "title" => "grid.parent_campaign", "category" => "data", "dictionary" => ["url" => "?object=campaigns.listAsOptions", "group" => true]], "category" => "ids", "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("parent_campaign", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "parent_campaigns", "inner_select" => ["t_parent_campaigns.name" => "parent_campaign"], "sortable" => true, "groupable" => true, "category" => "data", "width" => 200]));
        $this->addColumn(new \Component\Grid\Definition\Column("landing_id", ["type" => \Component\Grid\Definition\Column::INTEGER, "groupable" => true, "filter" => ["type" => \Component\Grid\Definition\Column::ENUM, "title" => "grid.landing", "category" => "data", "dictionary" => ["url" => "?object=landings.index&withGroupName=true", "valueProp" => "id", "group" => true]], "sortable" => true, "category" => "ids", "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("landing", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "landings", "required_columns" => ["landing_id"], "inner_select" => ["t_landings.name" => "landing"], "sortable" => true, "groupable" => true, "category" => "data", "decorator" => \Component\Grid\Builder\Decorator::LANDING, "width" => 200]));
        $this->addColumn(new \Component\Grid\Definition\Column("landing_clicked_datetime", ["type" => \Component\Grid\Definition\Column::DATETIME, "sortable" => true, "formatter" => \Component\Grid\Definition\Column::FORMATTER_DATETIME, "category" => "data"]));
        $this->addColumn(new \Component\Grid\Definition\Column("landing_clicked_period", ["type" => \Component\Grid\Definition\Column::STRING, "metric" => true, "inner_select" => ["UNIX_TIMESTAMP(landing_clicked_datetime) - UNIX_TIMESTAMP(datetime)" => "landing_clicked_period"], "sortable" => true, "category" => "data", "filter" => ["type" => \Component\Grid\Definition\Column::INTEGER], "formatter" => \Component\Grid\Definition\Column::FORMATTER_TIME_DIFF, "axis" => "volume"]));
        $this->addColumn(new \Component\Grid\Definition\Column("offer_id", ["type" => \Component\Grid\Definition\Column::INTEGER, "groupable" => true, "filter" => ["type" => \Component\Grid\Definition\Column::ENUM, "title" => "grid.offer", "category" => "data", "dictionary" => ["valueProp" => "id", "url" => "?object=offers.index&withGroupName=true", "group" => true]], "sortable" => true, "category" => "ids", "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("offer", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "offers", "inner_select" => ["t_offers.name" => "offer"], "groupable" => true, "sortable" => true, "category" => "data", "decorator" => \Component\Grid\Builder\Decorator::OFFER, "width" => 200]));
        $this->addColumn(new \Component\Grid\Definition\Column("affiliate_network_id", $this->_getAffiliateNetworkColumn()));
        $this->addColumn(new \Component\Grid\Definition\Column("affiliate_network", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "affiliate_networks", "inner_select" => ["t_affiliate_networks.name" => "affiliate_network"], "groupable" => true, "sortable" => true, "category" => "data", "decorator" => \Component\Grid\Builder\Decorator::AFFILIATE_NETWORK, "width" => 200]));
        $this->addColumn(new \Component\Grid\Definition\Column("ts_id", ["type" => \Component\Grid\Definition\Column::INTEGER, "sortable" => true, "filter" => ["type" => \Component\Grid\Definition\Column::ENUM, "title" => "grid.ts", "category" => "data", "dictionary" => ["valueProp" => "id", "url" => "?object=trafficSources.index"]], "category" => "ids", "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("ts", ["type" => \Component\Grid\Definition\Column::STRING, "inner_select" => ["t_traffic_sources.name" => "ts"], "relation" => "traffic_sources", "groupable" => true, "sortable" => true, "category" => "data", "decorator" => \Component\Grid\Builder\Decorator::TRAFFIC_SOURCE, "width" => 200]));
        $this->addColumn(new \Component\Grid\Definition\Column("stream_id", ["type" => \Component\Grid\Definition\Column::INTEGER, "category" => "ids", "groupable" => true, "sortable" => true, "filter" => ["type" => \Component\Grid\Definition\Column::ENUM, "title" => "grid.stream", "category" => "data", "dictionary" => ["url" => "?object=streams.listAsOptions", "valueProp" => "id", "group" => true]], "decorator" => \Component\Grid\Builder\Decorator::STREAM, "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("stream", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "streams", "inner_select" => ["t_streams.name" => "stream"], "groupable" => true, "sortable" => true, "category" => "data", "width" => 200]));
        $this->addColumn(new \Component\Grid\Definition\Column("is_unique_stream", ["type" => \Component\Grid\Definition\Column::BOOLEAN, "th_title" => "grid.is_unique_stream_th", "sortable" => true, "category" => "data", "formatter" => \Component\Grid\Definition\Column::FORMATTER_BOOLEAN, "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("is_unique_campaign", ["type" => \Component\Grid\Definition\Column::BOOLEAN, "th_title" => "grid.is_unique_campaign_th", "filter" => ["type" => \Component\Grid\Definition\Column::BOOLEAN], "groupable" => true, "sortable" => true, "category" => "data", "formatter" => \Component\Grid\Definition\Column::FORMATTER_BOOLEAN, "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("is_unique_global", ["type" => \Component\Grid\Definition\Column::BOOLEAN, "th_title" => "grid.is_unique_global_th", "filter" => ["type" => \Component\Grid\Definition\Column::BOOLEAN], "groupable" => true, "sortable" => true, "category" => "data", "formatter" => \Component\Grid\Definition\Column::FORMATTER_BOOLEAN, "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("is_lead", ["type" => \Component\Grid\Definition\Column::BOOLEAN, "filter" => ["type" => \Component\Grid\Definition\Column::BOOLEAN], "sortable" => true, "groupable" => true, "category" => "money", "formatter" => \Component\Grid\Definition\Column::FORMATTER_BOOLEAN, "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("is_sale", ["type" => \Component\Grid\Definition\Column::BOOLEAN, "filter" => ["type" => \Component\Grid\Definition\Column::BOOLEAN], "sortable" => true, "groupable" => true, "category" => "money", "formatter" => \Component\Grid\Definition\Column::FORMATTER_BOOLEAN, "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("is_rejected", ["type" => \Component\Grid\Definition\Column::BOOLEAN, "filter" => ["type" => \Component\Grid\Definition\Column::BOOLEAN], "sortable" => true, "groupable" => true, "category" => "money", "formatter" => \Component\Grid\Definition\Column::FORMATTER_BOOLEAN, "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("is_bot", ["type" => \Component\Grid\Definition\Column::BOOLEAN, "filter" => ["type" => \Component\Grid\Definition\Column::BOOLEAN], "sortable" => true, "groupable" => true, "category" => "device", "formatter" => \Component\Grid\Definition\Column::FORMATTER_BOOLEAN, "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("is_using_proxy", ["type" => \Component\Grid\Definition\Column::BOOLEAN, "th_title" => "grid.is_using_proxy_th", "filter" => ["type" => \Component\Grid\Definition\Column::BOOLEAN], "sortable" => true, "groupable" => true, "category" => "geo", "formatter" => \Component\Grid\Definition\Column::FORMATTER_BOOLEAN, "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("language_id", ["type" => \Component\Grid\Definition\Column::INTEGER, "relation" => "visitors", "inner_select" => ["t_visitors.language_id" => "language_id"], "filter" => ["type" => \Component\Grid\Definition\Column::ENUM, "title" => "grid.language", "category" => "device", "dictionary" => ["url" => "?object=clicks.dictionary&name=languages", "column" => "language_id"]], "hidden" => true, "category" => "ids", "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("language", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "ref_languages", "inner_select" => ["t_ref_languages.value" => "language"], "sortable" => true, "groupable" => true, "category" => "device", "decorator" => \Component\Grid\Builder\Decorator::LANGUAGE, "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("device_type_id", ["type" => \Component\Grid\Definition\Column::INTEGER, "relation" => "visitors", "inner_select" => ["t_visitors.device_type_id" => "device_type_id"], "filter" => ["type" => \Component\Grid\Definition\Column::ENUM, "title" => "grid.device_type", "category" => "device", "dictionary" => ["url" => "?object=clicks.dictionary&name=deviceTypes", "column" => "device_type_id"]], "hidden" => true, "category" => "ids", "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("device_type", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "ref_device_types", "inner_select" => ["t_ref_device_types.value" => "device_type"], "sortable" => true, "groupable" => true, "category" => "device", "decorator" => \Component\Grid\Builder\Decorator::DEVICE_TYPE_NAME, "width" => 100]));
        $this->addColumn(new \Component\Grid\Definition\Column("connection_type_id", ["type" => \Component\Grid\Definition\Column::INTEGER, "relation" => "visitors", "inner_select" => ["t_visitors.connection_type_id" => "connection_type_id"], "filter" => ["type" => \Component\Grid\Definition\Column::ENUM, "title" => "grid.connection_type", "category" => "connection", "dictionary" => ["url" => "?object=clicks.dictionary&name=connectionTypes"]], "hidden" => true, "category" => "ids", "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("connection_type", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "ref_connection_types", "inner_select" => ["t_ref_connection_types.value" => "connection_type"], "groupable" => true, "category" => "connection", "decorator" => \Component\Grid\Builder\Decorator::CONNECTION_TYPE_NAME, "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("ip_id", ["type" => \Component\Grid\Definition\Column::IP, "relation" => "visitors", "inner_select" => ["t_visitors.ip_id" => "ip_id"], "hidden" => true, "groupable" => true, "sortable" => true, "category" => "ids", "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("ip", ["type" => \Component\Grid\Definition\Column::IP, "relation" => "ref_ips", "inner_select" => ["t_ref_ips.value" => "ip"], "filter" => ["type" => \Component\Grid\Definition\Column::IP], "groupable" => true, "sortable" => true, "labels_allowed" => true, "category" => "ip", "decorator" => \Component\Grid\Builder\Decorator::IP, "width" => 111]));
        $this->addColumn(new \Component\Grid\Definition\Column("country_id", ["type" => \Component\Grid\Definition\Column::INTEGER, "relation" => "visitors", "inner_select" => ["t_visitors.country_id" => "country_id"], "filter" => ["type" => \Component\Grid\Definition\Column::ENUM, "title" => "grid.country", "category" => "geo", "dictionary" => ["url" => "?object=clicks.dictionary&name=countries"]], "hidden" => true, "category" => "ids", "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("country_code", ["type" => \Component\Grid\Definition\Column::STRING, "th_title" => "#", "relation" => "ref_countries", "inner_select" => ["t_ref_countries.value" => "country_code"], "groupable" => true, "hidden" => true, "category" => "geo", "width" => 60]));
        $this->addColumn(new \Component\Grid\Definition\Column("country_flag", ["type" => \Component\Grid\Definition\Column::STRING, "th_title" => "grid.country", "relation" => "ref_countries", "inner_select" => ["t_ref_countries.value" => "country_flag"], "groupable" => true, "category" => "geo", "required_columns" => ["country"], "exclude_from_details" => true, "width" => 33]));
        $this->addColumn(new \Component\Grid\Definition\Column("country", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "ref_countries", "inner_select" => ["t_ref_countries.value" => "country"], "sortable" => true, "groupable" => true, "category" => "geo", "decorator" => \Component\Grid\Builder\Decorator::COUNTRY_NAME]));
        $this->addColumn(new \Component\Grid\Definition\Column("region_id", ["type" => \Component\Grid\Definition\Column::INTEGER, "relation" => "visitors", "inner_select" => ["t_visitors.region_id" => "region_id"], "filter" => ["type" => \Component\Grid\Definition\Column::ENUM, "title" => "grid.region", "category" => "geo", "dictionary" => ["url" => "?object=clicks.dictionary&name=regions"]], "hidden" => true, "category" => "ids"]));
        $this->addColumn(new \Component\Grid\Definition\Column("region", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "ref_regions", "inner_select" => ["t_ref_regions.value" => "region"], "category" => "geo", "sortable" => true, "groupable" => true, "decorator" => \Component\Grid\Builder\Decorator::REGION_NAME, "width" => 100]));
        $this->addColumn(new \Component\Grid\Definition\Column("region_code", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "ref_regions", "category" => "geo", "inner_select" => ["t_ref_regions.value" => "region_code"], "sortable" => true, "groupable" => true, "hidden" => true]));
        $this->addColumn(new \Component\Grid\Definition\Column("city_id", ["type" => \Component\Grid\Definition\Column::INTEGER, "relation" => "visitors", "inner_select" => ["t_visitors.city_id" => "city_id"], "filter" => ["type" => \Component\Grid\Definition\Column::ENUM, "title" => "grid.city", "category" => "geo", "dictionary" => ["url" => "?object=clicks.dictionary&name=cities"]], "sortable" => true, "hidden" => true, "category" => "ids", "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("city", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "ref_cities", "inner_select" => ["t_ref_cities.value" => "city"], "sortable" => true, "groupable" => true, "category" => "geo", "decorator" => \Component\Grid\Builder\Decorator::CITY, "width" => 100]));
        $this->addColumn(new \Component\Grid\Definition\Column("user_agent_id", ["type" => \Component\Grid\Definition\Column::INTEGER, "relation" => "visitors", "inner_select" => ["t_visitors.user_agent_id" => "user_agent_id"], "filter" => ["type" => \Component\Grid\Definition\Column::ENUM, "title" => "grid.user_agent"], "category" => "ids", "hidden" => true, "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("user_agent", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "ref_user_agents", "inner_select" => ["t_ref_user_agents.value" => "user_agent"], "filter" => ["type" => \Component\Grid\Definition\Column::STRING], "sortable" => true, "groupable" => true, "category" => "device"]));
        $this->addColumn(new \Component\Grid\Definition\Column("operator_id", ["type" => \Component\Grid\Definition\Column::INTEGER, "relation" => "visitors", "inner_select" => ["t_visitors.operator_id" => "operator_id"], "filter" => ["type" => \Component\Grid\Definition\Column::ENUM, "title" => "grid.operator", "category" => "connection", "dictionary" => ["url" => "?object=clicks.dictionary&name=operators"]], "hidden" => true, "category" => "ids", "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("operator", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "ref_operators", "inner_select" => ["t_ref_operators.value" => "operator"], "groupable" => true, "sortable" => true, "hidden" => false, "decorator" => \Component\Grid\Builder\Decorator::OPERATOR_NAME, "category" => "connection", "width" => 100]));
        $this->addColumn(new \Component\Grid\Definition\Column("os_icon", ["type" => \Component\Grid\Definition\Column::STRING, "th_title" => "grid.os_th", "relation" => "ref_os", "inner_select" => ["t_ref_os.value" => "os_icon"], "category" => "device", "required_columns" => ["os"], "groupable" => true, "decorator" => \Component\Grid\Builder\Decorator::OS_ICON, "exclude_from_details" => true, "width" => 33]));
        $this->addColumn(new \Component\Grid\Definition\Column("os_id", ["type" => \Component\Grid\Definition\Column::INTEGER, "relation" => "visitors", "inner_select" => ["t_visitors.os_id" => "os_id"], "filter" => ["type" => \Component\Grid\Definition\Column::ENUM, "title" => "grid.os", "category" => "device", "dictionary" => ["url" => "?object=clicks.dictionary&name=os"]], "category" => "ids", "hidden" => true, "sortable" => true, "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("os", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "ref_os", "inner_select" => ["t_ref_os.value" => "os"], "th_title" => "grid.os_th", "groupable" => true, "sortable" => true, "category" => "device", "width" => 100]));
        $this->addColumn(new \Component\Grid\Definition\Column("os_version", ["type" => \Component\Grid\Definition\Column::VERSION, "relation" => "ref_os_versions", "inner_select" => ["t_ref_os_versions.value" => "os_version"], "groupable" => true, "filter" => ["type" => \Component\Grid\Definition\Column::VERSION, "title" => "grid.os_version"], "sortable" => true, "category" => "device", "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("browser_icon", ["type" => \Component\Grid\Definition\Column::STRING, "th_title" => "grid.browser", "relation" => "ref_browsers", "inner_select" => ["t_ref_browsers.value" => "browser_icon"], "groupable" => true, "category" => "device", "required_columns" => ["browser"], "decorator" => \Component\Grid\Builder\Decorator::BROWSER_ICON, "exclude_from_details" => true, "width" => 33]));
        $this->addColumn(new \Component\Grid\Definition\Column("browser_id", ["type" => \Component\Grid\Definition\Column::INTEGER, "relation" => "visitors", "inner_select" => ["t_visitors.browser_id" => "browser_id"], "filter" => ["type" => \Component\Grid\Definition\Column::ENUM, "title" => "grid.browser", "category" => "device", "dictionary" => ["url" => "?object=clicks.dictionary&name=browsers"]], "hidden" => true, "sortable" => true, "category" => "ids", "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("browser", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "ref_browsers", "inner_select" => ["t_ref_browsers.value" => "browser"], "sortable" => true, "groupable" => true, "category" => "device", "width" => 70]));
        $this->addColumn(new \Component\Grid\Definition\Column("browser_version", ["type" => \Component\Grid\Definition\Column::VERSION, "relation" => "ref_browser_versions", "inner_select" => ["t_ref_browser_versions.value" => "browser_version"], "filter" => ["type" => \Component\Grid\Definition\Column::VERSION, "title" => "grid.browser_version"], "groupable" => true, "sortable" => true, "category" => "device"]));
        $this->addColumn(new \Component\Grid\Definition\Column("device_model_id", ["type" => \Component\Grid\Definition\Column::INTEGER, "relation" => "visitors", "inner_select" => ["t_visitors.device_model_id" => "device_model_id"], "filter" => ["type" => \Component\Grid\Definition\Column::ENUM, "title" => "grid.device_model", "category" => "device", "dictionary" => ["url" => "?object=clicks.dictionary&name=deviceModels"]], "hidden" => true, "category" => "ids", "sortable" => true, "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("device_model", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "ref_device_models", "inner_select" => ["t_ref_device_models.value" => "device_model"], "groupable" => true, "sortable" => true, "category" => "device", "width" => 90]));
        if (\Traffic\GeoDb\Repository\GeoDbRepository::instance()->isDataTypeAvailable(\Traffic\GeoDb\IpInfoType::ISP)) {
            $this->addColumn(new \Component\Grid\Definition\Column("isp_id", ["type" => \Component\Grid\Definition\Column::INTEGER, "relation" => "visitors", "inner_select" => ["t_visitors.isp_id" => "isp_id"], "filter" => ["type" => \Component\Grid\Definition\Column::ENUM, "title" => "grid.isp", "category" => "connection", "dictionary" => ["url" => "?object=clicks.dictionary&name=isp"]], "hidden" => true, "category" => "ids", "sortable" => true, "width" => 80]));
            $this->addColumn(new \Component\Grid\Definition\Column("isp", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "ref_isp", "inner_select" => ["t_ref_isp.value" => "isp"], "groupable" => true, "sortable" => true, "category" => "connection"]));
        }
        $this->addColumn(new \Component\Grid\Definition\Column("source", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "ref_sources", "inner_select" => ["t_ref_sources.value" => "source"], "groupable" => true, "filter" => ["type" => \Component\Grid\Definition\Column::STRING], "labels_allowed" => true, "sortable" => true, "category" => "data"]));
        if (\Traffic\Repository\ParameterRepository::instance()->hasXRequestedWith()) {
            $this->addColumn(new \Component\Grid\Definition\Column("x_requested_with", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "ref_x_requested_with", "inner_select" => ["t_ref_x_requested_with.value" => "x_requested_with"], "groupable" => true, "filter" => ["type" => \Component\Grid\Definition\Column::STRING], "labels_allowed" => true, "sortable" => true, "category" => "data"]));
        }
        $this->addColumn(new \Component\Grid\Definition\Column("ad_campaign_id", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "ref_ad_campaign_ids", "inner_select" => ["t_ref_ad_campaign_ids.value" => "ad_campaign_id"], "filter" => ["type" => \Component\Grid\Definition\Column::STRING], "labels_allowed" => true, "groupable" => true, "sortable" => true, "category" => "ids", "decorator" => \Component\Grid\Builder\Decorator::AD_CAMPAIGN_ID, "width" => 80]));
        $this->addColumn(new \Component\Grid\Definition\Column("external_id", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "ref_external_ids", "inner_select" => ["t_ref_external_ids.value" => "external_id"], "filter" => ["type" => \Component\Grid\Definition\Column::STRING], "groupable" => true, "sortable" => true, "category" => "ids", "width" => 100]));
        $this->addColumn(new \Component\Grid\Definition\Column("creative_id", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "ref_creative_ids", "inner_select" => ["t_ref_creative_ids.value" => "creative_id"], "filter" => ["type" => \Component\Grid\Definition\Column::STRING], "groupable" => true, "sortable" => true, "category" => "ids", "labels_allowed" => true, "decorator" => \Component\Grid\Builder\Decorator::CREATIVE_ID, "width" => 100]));
        $this->addColumn(new \Component\Grid\Definition\Column("referrer", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "ref_referrers", "inner_select" => ["t_ref_referrers.value" => "referrer"], "groupable" => true, "filter" => ["type" => \Component\Grid\Definition\Column::STRING], "sortable" => true, "category" => "data", "width" => 120]));
        $this->addColumn(new \Component\Grid\Definition\Column("search_engine", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "ref_search_engines", "inner_select" => ["t_ref_search_engines.value" => "search_engine"], "groupable" => true, "sortable" => true, "filter" => ["type" => \Component\Grid\Definition\Column::STRING], "category" => "data"]));
        $this->addColumn(new \Component\Grid\Definition\Column("keyword", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "ref_keywords", "inner_select" => ["t_ref_keywords.value" => "keyword"], "groupable" => true, "labels_allowed" => true, "filter" => ["type" => \Component\Grid\Definition\Column::STRING], "sortable" => true, "category" => "data"]));
        $this->addColumn(new \Component\Grid\Definition\Column("destination", ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "ref_destinations", "inner_select" => ["t_ref_destinations.value" => "destination"], "filter" => ["type" => \Component\Grid\Definition\Column::STRING], "sortable" => true, "category" => "data", "width" => 360]));
        for ($i = 1; $i <= \Traffic\Model\Click::getSubIdCount(); $i++) {
            $key = "sub_id_" . $i;
            $this->addColumn(new \Component\Grid\Definition\Column($key, ["type" => \Component\Grid\Definition\Column::STRING, "relation" => "ref_" . $key, "inner_select" => ["t_ref_" . $key . ".value" => $key], "filter" => ["type" => \Component\Grid\Definition\Column::STRING], "sortable" => true, "groupable" => true, "labels_allowed" => true, "category" => "sub_ids", "width" => 100]));
        }
        for ($i = 1; $i <= \Traffic\Model\Click::EXTRA_PARAM_COUNT; $i++) {
            $key = "extra_param_" . $i;
            $this->addColumn(new \Component\Grid\Definition\Column($key, ["type" => \Component\Grid\Definition\Column::STRING, "filter" => ["type" => \Component\Grid\Definition\Column::STRING], "category" => "params"]));
        }
        $this->addColumn(new \Component\Grid\Definition\Column("revenue", ["type" => \Component\Grid\Definition\Column::DECIMAL, "metric" => true, "filter" => ["type" => \Component\Grid\Definition\Column::DECIMAL], "sortable" => true, "inner_select" => ["lead_revenue + sale_revenue" => "revenue"], "category" => "money", "fraction_size" => 4, "formatter" => \Component\Grid\Definition\Column::FORMATTER_MONEY, "axis" => "money"]));
        $this->addColumn(new \Component\Grid\Definition\Column("lead_revenue", ["type" => \Component\Grid\Definition\Column::DECIMAL, "metric" => true, "filter" => ["type" => \Component\Grid\Definition\Column::DECIMAL], "sortable" => true, "summary" => true, "category" => "money", "fraction_size" => 4, "formatter" => \Component\Grid\Definition\Column::FORMATTER_MONEY, "width" => 80, "axis" => "money"]));
        $this->addColumn(new \Component\Grid\Definition\Column("sale_revenue", ["type" => \Component\Grid\Definition\Column::DECIMAL, "metric" => true, "filter" => ["type" => \Component\Grid\Definition\Column::DECIMAL], "sortable" => true, "summary" => true, "category" => "money", "fraction_size" => 4, "formatter" => \Component\Grid\Definition\Column::FORMATTER_MONEY, "width" => 80, "axis" => "money"]));
        $this->addColumn(new \Component\Grid\Definition\Column("cost", ["type" => \Component\Grid\Definition\Column::DECIMAL, "metric" => true, "sortable" => true, "filter" => ["type" => \Component\Grid\Definition\Column::DECIMAL], "category" => "money", "fraction_size" => 4, "formatter" => \Component\Grid\Definition\Column::FORMATTER_MONEY, "width" => 100, "axis" => "money"]));
        $this->addColumn(new \Component\Grid\Definition\Column("profit", ["type" => \Component\Grid\Definition\Column::DECIMAL, "th_title" => "grid.profit_th", "metric" => true, "sortable" => false, "filter" => ["type" => \Component\Grid\Definition\Column::DECIMAL], "category" => "money", "formatter" => \Component\Grid\Definition\Column::FORMATTER_MONEY_H, "required_columns" => ["lead_revenue", "sale_revenue", "cost"], "inner_select" => ["lead_revenue + sale_revenue - cost" => "profit"], "fraction_size" => 4, "axis" => "money"]));
    }
    public function initRelations()
    {
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "campaigns", "foreign_key" => "campaign_id", "class" => "Traffic\\Model\\Campaign"]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "parent_campaigns", "foreign_key" => "parent_campaign_id", "class" => "Traffic\\Model\\Campaign"]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "campaign_groups", "foreign_key" => "group_id", "through" => "campaigns", "class" => "Component\\Groups\\Model\\Group"]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "visitors", "foreign_key" => "visitor_id", "class" => "Component\\Clicks\\Model\\Visitor"]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "streams", "foreign_key" => "stream_id", "class" => "Traffic\\Model\\BaseStream"]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "landings", "foreign_key" => "landing_id", "class" => "Traffic\\Model\\Landing"]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "offers", "foreign_key" => "offer_id", "class" => "Traffic\\Model\\Offer"]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "affiliate_networks", "through" => "offers", "foreign_key" => "affiliate_network_id", "class" => "Traffic\\Model\\AffiliateNetwork"]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "traffic_sources", "foreign_key" => "ts_id", "class" => "Traffic\\Model\\TrafficSource"]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_destinations", "foreign_key" => "destination_id", "class" => "Component\\Clicks\\Model\\Ref\\Destination", "dict" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_browsers", "foreign_key" => "browser_id", "through" => "visitors", "class" => "Component\\Clicks\\Model\\Ref\\Browser", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_browser_versions", "foreign_key" => "browser_version_id", "through" => "visitors", "class" => "Component\\Clicks\\Model\\Ref\\BrowserVersion", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_ips", "foreign_key" => "ip_id", "class" => "Component\\Clicks\\Model\\Ref\\Ip", "through" => "visitors", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_user_agents", "foreign_key" => "user_agent_id", "through" => "visitors", "class" => "Component\\Clicks\\Model\\Ref\\UserAgent", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_languages", "foreign_key" => "language_id", "through" => "visitors", "class" => "Component\\Clicks\\Model\\Ref\\Language", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_operators", "foreign_key" => "operator_id", "through" => "visitors", "class" => "Component\\Clicks\\Model\\Ref\\Operator", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_countries", "foreign_key" => "country_id", "through" => "visitors", "class" => "Component\\Clicks\\Model\\Ref\\Country", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_regions", "foreign_key" => "region_id", "through" => "visitors", "class" => "Component\\Clicks\\Model\\Ref\\Region", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_cities", "foreign_key" => "city_id", "class" => "Component\\Clicks\\Model\\Ref\\City", "through" => "visitors", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_device_types", "foreign_key" => "device_type_id", "class" => "Component\\Clicks\\Model\\Ref\\DeviceType", "through" => "visitors", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_device_models", "foreign_key" => "device_model_id", "class" => "Component\\Clicks\\Model\\Ref\\DeviceModel", "through" => "visitors", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_connection_types", "foreign_key" => "connection_type_id", "class" => "Component\\Clicks\\Model\\Ref\\ConnectionType", "through" => "visitors", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_isp", "foreign_key" => "isp_id", "class" => "Component\\Clicks\\Model\\Ref\\Isp", "through" => "visitors", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_os", "foreign_key" => "os_id", "class" => "Component\\Clicks\\Model\\Ref\\Os", "through" => "visitors", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_os_versions", "foreign_key" => "os_version_id", "class" => "Component\\Clicks\\Model\\Ref\\OsVersion", "through" => "visitors", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_keywords", "foreign_key" => "keyword_id", "class" => "Component\\Clicks\\Model\\Ref\\Keyword", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_referrers", "foreign_key" => "referrer_id", "class" => "Component\\Clicks\\Model\\Ref\\Referrer", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_search_engines", "foreign_key" => "search_engine_id", "class" => "Component\\Clicks\\Model\\Ref\\SearchEngine", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_sources", "foreign_key" => "source_id", "class" => "Component\\Clicks\\Model\\Ref\\Source", "dict" => true, "allow_empty" => true]));
        if (\Traffic\Repository\ParameterRepository::instance()->hasXRequestedWith()) {
            $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_x_requested_with", "foreign_key" => "x_requested_with_id", "class" => "Component\\Clicks\\Model\\Ref\\XRequestedWith", "dict" => true, "allow_empty" => true]));
        }
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_external_ids", "foreign_key" => "external_id_id", "class" => "Component\\Clicks\\Model\\Ref\\ExternalId", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_ad_campaign_ids", "foreign_key" => "ad_campaign_id_id", "class" => "Component\\Clicks\\Model\\Ref\\AdCampaignId", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_creative_ids", "foreign_key" => "creative_id_id", "class" => "Component\\Clicks\\Model\\Ref\\CreativeId", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_sub_id_1", "foreign_key" => "sub_id_1_id", "class" => "Component\\Clicks\\Model\\Ref\\SubIdN", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_sub_id_2", "foreign_key" => "sub_id_2_id", "class" => "Component\\Clicks\\Model\\Ref\\SubIdN", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_sub_id_3", "foreign_key" => "sub_id_3_id", "class" => "Component\\Clicks\\Model\\Ref\\SubIdN", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_sub_id_4", "foreign_key" => "sub_id_4_id", "class" => "Component\\Clicks\\Model\\Ref\\SubIdN", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_sub_id_5", "foreign_key" => "sub_id_5_id", "class" => "Component\\Clicks\\Model\\Ref\\SubIdN", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_sub_id_6", "foreign_key" => "sub_id_6_id", "class" => "Component\\Clicks\\Model\\Ref\\SubIdN", "dict" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_sub_id_7", "foreign_key" => "sub_id_7_id", "class" => "Component\\Clicks\\Model\\Ref\\SubIdN", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_sub_id_8", "foreign_key" => "sub_id_8_id", "class" => "Component\\Clicks\\Model\\Ref\\SubIdN", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_sub_id_9", "foreign_key" => "sub_id_9_id", "class" => "Component\\Clicks\\Model\\Ref\\SubIdN", "dict" => true, "allow_empty" => true]));
        $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_sub_id_10", "foreign_key" => "sub_id_10_id", "class" => "Component\\Clicks\\Model\\Ref\\SubIdN", "dict" => true, "allow_empty" => true]));
        if (\Traffic\Repository\ParameterRepository::instance()->hasSubId15()) {
            $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_sub_id_11", "foreign_key" => "sub_id_11_id", "class" => "Component\\Clicks\\Model\\Ref\\SubIdN", "dict" => true, "allow_empty" => true]));
            $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_sub_id_12", "foreign_key" => "sub_id_12_id", "class" => "Component\\Clicks\\Model\\Ref\\SubIdN", "dict" => true, "allow_empty" => true]));
            $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_sub_id_13", "foreign_key" => "sub_id_13_id", "class" => "Component\\Clicks\\Model\\Ref\\SubIdN", "dict" => true, "allow_empty" => true]));
            $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_sub_id_14", "foreign_key" => "sub_id_14_id", "class" => "Component\\Clicks\\Model\\Ref\\SubIdN", "dict" => true, "allow_empty" => true]));
            $this->addRelation(new \Component\Grid\Definition\Relation(["name" => "ref_sub_id_15", "foreign_key" => "sub_id_15_id", "class" => "Component\\Clicks\\Model\\Ref\\SubIdN", "dict" => true, "allow_empty" => true]));
        }
    }
}

?>